stages:
  - build
  - push

build_project:
  stage: build
  tags:
    - nodejs-20-alpine-ci
  script:
    - cd ./src
    - cp .env.dev .env
    - yarn install
    - yarn build
  only:
    - merge_requests
    - develop
    - master

build_and_push_docker_image:
  stage: push
  tags:
    - docker-ci-arm64
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - docker info
  script:
    # Логин в GitLab Registry
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"

    # Устанавливаем аргумент сборки на основе ветки
    - |
      if [[ "$CI_COMMIT_REF_NAME" == "master" ]]; then
        export DOCKER_TARGET="prod"
      else
        export DOCKER_TARGET="stage"
      fi

    # Устанавливаем основной тег для Docker образа (тег из GitLab или дата/время)
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        export IMAGE_TAG="$CI_COMMIT_TAG"
      else
        export IMAGE_TAG="$(date +%Y-%m-%d-%H-%M)"
      fi

    # Сборка Docker образа с использованием аргумента NODE_ENV
    - docker build --build-arg NODE_ENV=$DOCKER_TARGET -t "$CI_REGISTRY_IMAGE:$IMAGE_TAG" .

    # Тегируем образ для latest и latest-stage
    - |
      if [[ "$CI_COMMIT_REF_NAME" == "master" ]]; then
        docker tag "$CI_REGISTRY_IMAGE:$IMAGE_TAG" "$CI_REGISTRY_IMAGE:latest"
      elif [[ "$CI_COMMIT_REF_NAME" == "develop" ]]; then
        docker tag "$CI_REGISTRY_IMAGE:$IMAGE_TAG" "$CI_REGISTRY_IMAGE:latest-stage"
      fi

    # Пушим все теги одним пушем
    - docker push --all-tags "$CI_REGISTRY_IMAGE"
  only:
    - develop
    - master
